
reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行),
将其结果汇总为单个返回值。


const array1 = [1,2,3,4];
const reducer = (accumulator,currentValue) =>  accumulator+ currentVlue;

//1+2+3+4
console.log(array1.reduce(reducer));//10
//5+1+2+3+4
console.log(array1.reduce(reducer,5))//15


arr.reduce(callback[, initialValue])
参数 :

    ㈠ callback 执行数组中每个值的函数,接收4个参数:

      1.Accumulator(acc)(累计器)

      2.Current Value(cur)(当前值)

      3.Current Index(idx)(当前索引)

      4.Source Array(src)(源数组)
    
    ㈡ initialValue 作为第一次调用callback函数时的第一个参数的值
    
      如果没有提供初始值,则将使用数组中的第一个元素.
      
      在没有初始值的空数组上调用 reduce 将报错。
 
 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。
 
 
 (例)：
      数组里所有值的和
      var sum = [0,1,2,3].reduce(function (accumalator,currentValue){
          return accumalator+currentValue;
      },0);
      //6
      
      箭头函数形式：
      var total = [0,1,2,3].reduce( 
          ( acc,cur ) => acc+cur,
          0
        );
        
        累加对象数组里的值
        var initialValue = 0;
        var sum = [{x:1},{x:2},{x:3}].reduce(function (accumulator,currentValue){
            return accumulator + currentValue.x;
        },initialValue);
        
        console.log(sum);//6
        
        var initiaValue = 0;
        箭头函数
        var sum = [{x:1},{x:2},{x:3}].reduce(
          ( accumulator,currentValue) => accumulator + currentValue.x
          ,initivalue
        );
        console.log(sum) //6
        
        
        将二位数组转化为一维
        var flattened = [ [0,1],[2,3],[4,5]].reduce(
          function(a,b){
            return a.concat(b);
          },
          []
        );
        //flattened is [0,1,2,3,4,5]
        
        var flattened = [ [0,1],[2,3],[4,5]].reduce(
          (acc,cur) => acc.concat(cur),
          []
        );
        
        计算数组中每个元素出现的次数
        
        var names = ['Alice','Bob','Tiff','Bruce','Alice'];
        var countedNames = names.reduce(function(allNames,name){
          if(names in Allnames){
            allNames[name]+};
          }
          else{
            allNames[name] = 1;
          }
          return allNames;
        },{});
        //countedNames  is {'Alice':2,'Bob':1,'Tiff':1,'Bruce':1}
        
        按属性对object分类
        
        var people = [
            {name:'Alice',age:21},
            {name:'Max',age:20},
            {name:'Jane',age:20}
          ];
        function groupBy(objectArray,property){
          return objectArray.reduce( function(acc,obj){
            var key = obj[property];
            if(!acc[key]){
              acc[key] = [];
            }
            acc[key].push(obj);
            return acc;
          },{});
        }
        
        var groupedPeople = groupBy(people,'age');
        
        //groupedPeople is: {
          20:[
            {name:'Max',age:20},
            {name:'Jane',age:20}
          ],
          21:[
            {name:'Alice',age:21}
          ]
          
          
        }
          
        ];
        
        
        
