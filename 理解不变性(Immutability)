在编码中,我们编写的代码一直在改变变量的值,这是可变性

但是可变性经常会导致以外的错误,如果代码只处理原始数据类型(number,string,booleans)

那么你不用担心,但如果处理Arrays和Objects时,则需要小心执行可变操作.

let a = [1,2,3];
let b = a;
b.push(8);

console.log(b) //[1,2,3,8]
console.log(a) //[1,2,3,8]

可以看到更新数组b也会同事改变数组a

因为 对象和数组是引用数据类型。

这样的数据类型实际上并不保存值,而是存储指向存储单元的指针.

将a赋值给b,其实我们只是创建了第二个指向同一存储单元的指针.

要解决这个问题,我们需要将引用的值复制到一个新的存储单元.

在js中有三种不同的实现方式:
  1.使用Immutable.js创建不可变的数据结构
  2.使用js库(Underscore和Lodash)来执行不可变的操作
  3.使用ES6方法执行不可变操作
  
  ES6方法
  
  a = [1,2,3]
  b = Object.assign([],a);
  console.log(b) //[1,2,3]
  
  b.push(8);
  console.log(b)//[1,2,3，8]
  console.log(a)//[1,2,3]
  
  在上面的代码中,修改数组b不会影响数组a.
  
  Object.assign()创建了一个新的副本,由数组b指向
  
  我们也可以使用操作符(...)执行不可变操作
  
  a = [1,2,3];
  b = [...a,4,5,6];
  console.log(b)//[1,2,3,4,5,6]
  
  
